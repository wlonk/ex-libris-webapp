{"version":3,"sources":["web-client/tests/app.lint-test.js","web-client/tests/authenticators/oauth2.lint-test.js","web-client/tests/authenticators/torii.lint-test.js","web-client/tests/controllers/application.lint-test.js","web-client/tests/helpers/destroy-app.js","web-client/tests/helpers/destroy-app.lint-test.js","web-client/tests/helpers/ember-simple-auth.js","web-client/tests/helpers/module-for-acceptance.js","web-client/tests/helpers/module-for-acceptance.lint-test.js","web-client/tests/helpers/resolver.js","web-client/tests/helpers/resolver.lint-test.js","web-client/tests/helpers/start-app.js","web-client/tests/helpers/start-app.lint-test.js","web-client/tests/helpers/torii.js","web-client/tests/resolver.lint-test.js","web-client/tests/router.lint-test.js","web-client/tests/routes/application.lint-test.js","web-client/tests/services/current-user.lint-test.js","web-client/tests/test-helper.js","web-client/tests/test-helper.lint-test.js","web-client/tests/torii-providers/dropbox-oauth2.lint-test.js","web-client/tests/unit/services/current-user-test.js","web-client/tests/unit/services/current-user-test.lint-test.js","web-client/tests/web-client/templates/about.template-lint-test.js","web-client/tests/web-client/templates/application.template-lint-test.js","web-client/tests/web-client/templates/index.template-lint-test.js","web-client/tests/web-client/templates/privacy.template-lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('web-client/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint.\\n');\n  });\n});","define('web-client/tests/authenticators/oauth2.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - authenticators/oauth2.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/oauth2.js should pass ESLint.\\n');\n  });\n});","define('web-client/tests/authenticators/torii.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - authenticators/torii.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/torii.js should pass ESLint.\\n');\n  });\n});","define('web-client/tests/controllers/application.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/application.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/application.js should pass ESLint.\\n31:11  - Unexpected console statement. (no-console)\\n37:10  - \\'error\\' is defined but never used. (no-unused-vars)');\n  });\n});","define('web-client/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('web-client/tests/helpers/destroy-app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/destroy-app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint.\\n');\n  });\n});","define('web-client/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _emberSimpleAuthAuthenticatorsTest) {\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _emberSimpleAuthAuthenticatorsTest['default']);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  ;\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  ;\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n\n  ;\n});","define('web-client/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'web-client/tests/helpers/start-app', 'web-client/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _webClientTestsHelpersStartApp, _webClientTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _webClientTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _webClientTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('web-client/tests/helpers/module-for-acceptance.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint.\\n');\n  });\n});","define('web-client/tests/helpers/resolver', ['exports', 'web-client/resolver', 'web-client/config/environment'], function (exports, _webClientResolver, _webClientConfigEnvironment) {\n\n  var resolver = _webClientResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _webClientConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _webClientConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('web-client/tests/helpers/resolver.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/resolver.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint.\\n');\n  });\n});","define('web-client/tests/helpers/start-app', ['exports', 'ember', 'web-client/app', 'web-client/config/environment'], function (exports, _ember, _webClientApp, _webClientConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _webClientConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _webClientApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('web-client/tests/helpers/start-app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/start-app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint.\\n');\n  });\n});","define('web-client/tests/helpers/torii', ['exports'], function (exports) {\n  exports.stubValidSession = stubValidSession;\n\n  function stubValidSession(application, sessionData) {\n    var session = application.__container__.lookup('service:session');\n    var sm = session.get('stateMachine');\n    Ember.run(function () {\n      sm.send('startOpen');\n      sm.send('finishOpen', sessionData);\n    });\n  }\n});","define('web-client/tests/resolver.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - resolver.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint.\\n');\n  });\n});","define('web-client/tests/router.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - router.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint.\\n');\n  });\n});","define('web-client/tests/routes/application.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/application.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint.\\n');\n  });\n});","define('web-client/tests/services/current-user.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - services/current-user.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/current-user.js should pass ESLint.\\n');\n  });\n});","define('web-client/tests/test-helper', ['exports', 'web-client/tests/helpers/resolver', 'ember-qunit'], function (exports, _webClientTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_webClientTestsHelpersResolver['default']);\n});","define('web-client/tests/test-helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - test-helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint.\\n');\n  });\n});","define('web-client/tests/torii-providers/dropbox-oauth2.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - torii-providers/dropbox-oauth2.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'torii-providers/dropbox-oauth2.js should pass ESLint.\\n');\n  });\n});","define('web-client/tests/unit/services/current-user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:current-user', 'Unit | Service | current user', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('web-client/tests/unit/services/current-user-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/services/current-user-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/current-user-test.js should pass ESLint.\\n');\n  });\n});","define('web-client/tests/web-client/templates/about.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - web-client/templates/about.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'web-client/templates/about.hbs should pass TemplateLint.\\n');\n  });\n});","define('web-client/tests/web-client/templates/application.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - web-client/templates/application.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'web-client/templates/application.hbs should pass TemplateLint.\\n');\n  });\n});","define('web-client/tests/web-client/templates/index.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - web-client/templates/index.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'web-client/templates/index.hbs should pass TemplateLint.\\n');\n  });\n});","define('web-client/tests/web-client/templates/privacy.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - web-client/templates/privacy.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'web-client/templates/privacy.hbs should pass TemplateLint.\\n');\n  });\n});","/* jshint ignore:start */\n\nrequire('web-client/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}